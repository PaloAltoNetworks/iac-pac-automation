name: Update Prisma Cloud Code Security Policies

# Controls when the workflow will run
on:
  # Triggers the workflow on push but only for the main branch
  push:
    branches: [ pccs-demo ]
    paths-ignore:
    - '.github/workflows/main.yml'
    - '**/README.md'

jobs:
  policy_update:
    runs-on: ubuntu-latest
    env:
      console_address: https://api.prismacloud.io
    
    defaults:
      run:
        shell: bash
          
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repo
        uses: actions/checkout@v2

      # Get modified files (https://github.com/marketplace/actions/get-all-changed-files)
      - name: Get Modified Files
        id: files_modified
        uses: jitterbit/get-changed-files@v1

      - name: Get Prisma Cloud Token
        id: prisma
        run: |
          AUTH_TOKEN=$(curl -skH "Content-Type: application/json" \
              -d '{"username":"${{ secrets.PCS_USER }}", "password":"${{ secrets.PCS_PASS }}"}' \
              $console_address/login | jq -r .token)
          echo "::set-output name=token::$AUTH_TOKEN"
      
      # Create policy
      - name: Create Policy
        if: ${{ steps.files_modified.outputs.added }}
        run: |
          for changed_file in ${{ steps.files_modified.outputs.added }}; do
            data=$(cat ${changed_file})         
            id=$(curl --request POST \
                  --url $console_address/policy \
                  --header 'Content-Type: application/json' \
                  --header "Authorization: Bearer ${{ steps.prisma.outputs.token }}" \
                  --data "$data" | jq -r .policyId)
            git mv ${changed_file} "$id.json"
            git config user.email "demo@panw.com"
            git config user.name "${GITHUB_ACTOR}"
            git commit -m "policy renamed to $id.json"
            git push
          done
      
      # Update policy
      - name: Update Policy
        if: ${{ steps.files_modified.outputs.modified }}
        run: |
          for changed_file in ${{ steps.files_modified.outputs.modified }}; do
            policy=$(echo ${changed_file} | cut -d '.' -f 1)
            data=$(cat ${changed_file})
            curl --request PUT \
                --url $console_address/policy/$policy \
                --header 'Accept: application/json' \
                --header 'Content-Type: application/json' \
                --header "Authorization: Bearer ${{ steps.prisma.outputs.token }}" \
                --data "$data"
          done
      
      # Delete policy
      - name: Delete Policy
        if: ${{ steps.files_modified.outputs.removed }}
        run: |
          for changed_file in ${{ steps.files_modified.outputs.removed }}; do
            deleted_policy=$(echo ${changed_file} | cut -d '.' -f 1)
            curl --request DELETE \
                --url $console_address/policy/$deleted_policy \
                --header 'Accept: application/json' \
                --header "Authorization: Bearer ${{ steps.prisma.outputs.token }}"
          done
